// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/tmsamples.h"
#include <RcppArmadillo.h>
#include <Rcpp.h>
#include <string>
#include <set>

using namespace Rcpp;

// sample_documents
arma::sp_mat sample_documents(const NumericMatrix theta, const NumericMatrix phi, const std::vector<std::size_t> doc_lengths, const bool verbose, std::size_t threads);
static SEXP _tmsamples_sample_documents_try(SEXP thetaSEXP, SEXP phiSEXP, SEXP doc_lengthsSEXP, SEXP verboseSEXP, SEXP threadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const NumericMatrix >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< const std::vector<std::size_t> >::type doc_lengths(doc_lengthsSEXP);
    Rcpp::traits::input_parameter< const bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type threads(threadsSEXP);
    rcpp_result_gen = Rcpp::wrap(sample_documents(theta, phi, doc_lengths, verbose, threads));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _tmsamples_sample_documents(SEXP thetaSEXP, SEXP phiSEXP, SEXP doc_lengthsSEXP, SEXP verboseSEXP, SEXP threadsSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_tmsamples_sample_documents_try(thetaSEXP, phiSEXP, doc_lengthsSEXP, verboseSEXP, threadsSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}

// validate (ensure exported C++ functions exist before calling them)
static int _tmsamples_RcppExport_validate(const char* sig) { 
    static std::set<std::string> signatures;
    if (signatures.empty()) {
        signatures.insert("arma::sp_mat(*sample_documents)(const NumericMatrix,const NumericMatrix,const std::vector<std::size_t>,const bool,std::size_t)");
    }
    return signatures.find(sig) != signatures.end();
}

// registerCCallable (register entry points for exported C++ functions)
RcppExport SEXP _tmsamples_RcppExport_registerCCallable() { 
    R_RegisterCCallable("tmsamples", "_tmsamples_sample_documents", (DL_FUNC)_tmsamples_sample_documents_try);
    R_RegisterCCallable("tmsamples", "_tmsamples_RcppExport_validate", (DL_FUNC)_tmsamples_RcppExport_validate);
    return R_NilValue;
}

static const R_CallMethodDef CallEntries[] = {
    {"_tmsamples_sample_documents", (DL_FUNC) &_tmsamples_sample_documents, 5},
    {"_tmsamples_RcppExport_registerCCallable", (DL_FUNC) &_tmsamples_RcppExport_registerCCallable, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_tmsamples(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
